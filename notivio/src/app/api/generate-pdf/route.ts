import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { notes } = await request.json()

    if (!notes) {
      return NextResponse.json({ error: "Notes data is required" }, { status: 400 })
    }
    // Import PDFKit dynamically
    const PDFDocument = (await import("pdfkit")).default
    // Create a new PDF document
    const doc = new PDFDocument({ margin: 50 })
    const chunks: Buffer[] = []
    // Collect PDF data
    doc.on("data", (chunk) => chunks.push(chunk))
    // Return promise that resolves when PDF is complete
    const pdfBuffer = await new Promise<Buffer>((resolve) => {
      doc.on("end", () => resolve(Buffer.concat(chunks)))

      // Add title
      doc.fontSize(24).fillColor("#8a7559").text("Notivio Video Notes", { align: "center" }).moveDown()

      // Add video title
      doc.fontSize(18).fillColor("#000000").text(notes.title, { align: "center" }).moveDown()

      // Add metadata
      doc
        .fontSize(12)
        .fillColor("#666666")
        .text(`Duration: ${notes.duration}`, { align: "center" })
        .text(`Generated by Notivio AI`, { align: "center" })
        .moveDown(2)

      // Add summary section
      doc.fontSize(16).fillColor("#8a7559").text("Summary", { underline: true }).moveDown(0.5)

      doc.fontSize(12).fillColor("#000000").text(notes.summary, { align: "justify" }).moveDown(1.5)

      // Add key points
      if (notes.keyPoints && notes.keyPoints.length > 0) {
        doc.fontSize(16).fillColor("#8a7559").text("Key Takeaways", { underline: true }).moveDown(0.5)

        notes.keyPoints.forEach((point: string, index: number) => {
          doc
            .fontSize(12)
            .fillColor("#000000")
            .text(`${index + 1}. ${point}`, { indent: 20 })
            .moveDown(0.3)
        })
        doc.moveDown(1)
      }

      // Add structured notes
      doc.fontSize(16).fillColor("#8a7559").text("Detailed Notes", { underline: true }).moveDown(1)

      notes.sections.forEach((section: any, sectionIndex: number) => {
        // Check if we need a new page
        if (doc.y > 700) {
          doc.addPage()
        }

        // Section title
        doc
          .fontSize(14)
          .fillColor("#8a7559")
          .text(`${sectionIndex + 1}. ${section.title}`, { underline: true })
          .moveDown(0.5)

        // Section content
        section.content.forEach((point: string) => {
          doc.fontSize(11).fillColor("#000000").text(`â€¢ ${point}`, { indent: 20, align: "justify" }).moveDown(0.3)
        })

        doc.moveDown(1)
      })

      // Add footer
      const pageCount = doc.bufferedPageRange().count
      for (let i = 0; i < pageCount; i++) {
        doc.switchToPage(i)
        doc
          .fontSize(10)
          .fillColor("#666666")
          .text(`Page ${i + 1} of ${pageCount} | Generated by Notivio`, 50, doc.page.height - 50, { align: "center" })
      }
      doc.end()
    })
    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${notes.title || "notes"}.pdf"`,
      },
    })
  } catch (error: any) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
