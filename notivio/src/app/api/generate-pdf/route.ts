import { type NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { notes } = await request.json();

    if (!notes) {
      return NextResponse.json(
        { error: "Notes data is required" },
        { status: 400 }
      );
    }

    // Simple PDF generation (in a real app, you'd use a library like jsPDF or Puppeteer)
    const pdfContent = generatePDFContent(notes);

    // For now, return a text file as PDF generation requires additional libraries
    const blob = new Blob([pdfContent], { type: "text/plain" });

    return new NextResponse(blob, {
      headers: {
        "Content-Type": "application/octet-stream",
        "Content-Disposition": `attachment; filename="${
          notes.title || "notes"
        }.txt"`,
      },
    });
  } catch (error: any) {
    console.error("Error generating PDF:", error);
    return NextResponse.json(
      { error: "Failed to generate PDF" },
      { status: 500 }
    );
  }
}

function generatePDFContent(notes: any): string {
  let content = `${notes.title}\n`;
  content += `Duration: ${notes.duration}\n`;
  content += `Generated by Notivio\n\n`;

  content += `SUMMARY\n`;
  content += `${notes.summary}\n\n`;

  content += `KEY POINTS\n`;
  notes.keyPoints.forEach((point: string, index: number) => {
    content += `${index + 1}. ${point}\n`;
  });
  content += "\n";

  content += `STRUCTURED NOTES\n`;
  notes.sections.forEach((section: any, index: number) => {
    content += `\n${index + 1}. ${section.title}\n`;
    section.content.forEach((point: string) => {
      content += `   â€¢ ${point}\n`;
    });
  });

  content += `\n\nRAW TRANSCRIPT\n`;
  content += notes.transcript;

  return content;
}
