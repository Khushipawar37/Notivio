import { type NextRequest, NextResponse } from "next/server"
import jsPDF from "jspdf"

export async function POST(request: NextRequest) {
  try {
    const { notes } = await request.json()

    if (!notes) {
      return NextResponse.json({ error: "Notes data is required" }, { status: 400 })
    }

    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const margin = 20
    const maxWidth = pageWidth - 2 * margin
    let yPosition = margin

    // Helper function to add text with word wrapping
    const addWrappedText = (text: string, fontSize = 12, isBold = false) => {
      pdf.setFontSize(fontSize)
      if (isBold) {
        pdf.setFont("helvetica", "bold")
      } else {
        pdf.setFont("helvetica", "normal")
      }

      const lines = pdf.splitTextToSize(text, maxWidth)

      // Check if we need a new page
      if (yPosition + lines.length * fontSize * 0.5 > pdf.internal.pageSize.getHeight() - margin) {
        pdf.addPage()
        yPosition = margin
      }

      pdf.text(lines, margin, yPosition)
      yPosition += lines.length * fontSize * 0.5 + 5
    }

    // Add title
    addWrappedText(notes.title || "Video Notes", 18, true)
    yPosition += 5

    // Add metadata
    addWrappedText(`Duration: ${notes.duration || "N/A"}`, 10)
    addWrappedText("Generated by YouTube Transcript API", 10)
    yPosition += 10

    // Add summary
    addWrappedText("SUMMARY", 14, true)
    addWrappedText(notes.summary || "No summary available", 11)
    yPosition += 10

    // Add key points
    addWrappedText("KEY POINTS", 14, true)
    if (notes.keyPoints && notes.keyPoints.length > 0) {
      notes.keyPoints.forEach((point: string, index: number) => {
        addWrappedText(`${index + 1}. ${point}`, 11)
      })
    }
    yPosition += 10

    // Add structured notes
    addWrappedText("STRUCTURED NOTES", 14, true)
    if (notes.sections && notes.sections.length > 0) {
      notes.sections.forEach((section: any, index: number) => {
        addWrappedText(`${index + 1}. ${section.title}`, 12, true)
        if (section.content && section.content.length > 0) {
          section.content.forEach((point: string) => {
            addWrappedText(`   â€¢ ${point}`, 11)
          })
        }
        yPosition += 5
      })
    }
    yPosition += 10

    // Add raw transcript
    addWrappedText("RAW TRANSCRIPT", 14, true)
    addWrappedText(notes.transcript || "No transcript available", 10)

    // Generate PDF buffer
    const pdfBuffer = pdf.output("arraybuffer")

    return new NextResponse(pdfBuffer, {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="${(notes.title || "notes").replace(/[^a-zA-Z0-9]/g, "_")}.pdf"`,
      },
    })
  } catch (error: any) {
    console.error("Error generating PDF:", error)
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 })
  }
}
